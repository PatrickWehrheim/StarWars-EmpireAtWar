//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/4K_Space_Skyboxes/Demo/Scripts/DemoActionList.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DemoActionList : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DemoActionList()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DemoActionList"",
    ""maps"": [
        {
            ""name"": ""Demo"",
            ""id"": ""9d1be199-6356-4fbf-8a11-2b840ed8669f"",
            ""actions"": [
                {
                    ""name"": ""LeftMouse"",
                    ""type"": ""Button"",
                    ""id"": ""418a6928-46ec-40c6-97f6-ba3c26b60d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouse"",
                    ""type"": ""Button"",
                    ""id"": ""f4b375cd-de2a-44e8-9025-38a74a509dbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4b24660-06ae-4e4f-bd95-a22f498e7276"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""996d7070-4ca1-4a11-9906-8964c25da491"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Demo
        m_Demo = asset.FindActionMap("Demo", throwIfNotFound: true);
        m_Demo_LeftMouse = m_Demo.FindAction("LeftMouse", throwIfNotFound: true);
        m_Demo_RightMouse = m_Demo.FindAction("RightMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Demo
    private readonly InputActionMap m_Demo;
    private IDemoActions m_DemoActionsCallbackInterface;
    private readonly InputAction m_Demo_LeftMouse;
    private readonly InputAction m_Demo_RightMouse;
    public struct DemoActions
    {
        private @DemoActionList m_Wrapper;
        public DemoActions(@DemoActionList wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMouse => m_Wrapper.m_Demo_LeftMouse;
        public InputAction @RightMouse => m_Wrapper.m_Demo_RightMouse;
        public InputActionMap Get() { return m_Wrapper.m_Demo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DemoActions set) { return set.Get(); }
        public void SetCallbacks(IDemoActions instance)
        {
            if (m_Wrapper.m_DemoActionsCallbackInterface != null)
            {
                @LeftMouse.started -= m_Wrapper.m_DemoActionsCallbackInterface.OnLeftMouse;
                @LeftMouse.performed -= m_Wrapper.m_DemoActionsCallbackInterface.OnLeftMouse;
                @LeftMouse.canceled -= m_Wrapper.m_DemoActionsCallbackInterface.OnLeftMouse;
                @RightMouse.started -= m_Wrapper.m_DemoActionsCallbackInterface.OnRightMouse;
                @RightMouse.performed -= m_Wrapper.m_DemoActionsCallbackInterface.OnRightMouse;
                @RightMouse.canceled -= m_Wrapper.m_DemoActionsCallbackInterface.OnRightMouse;
            }
            m_Wrapper.m_DemoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftMouse.started += instance.OnLeftMouse;
                @LeftMouse.performed += instance.OnLeftMouse;
                @LeftMouse.canceled += instance.OnLeftMouse;
                @RightMouse.started += instance.OnRightMouse;
                @RightMouse.performed += instance.OnRightMouse;
                @RightMouse.canceled += instance.OnRightMouse;
            }
        }
    }
    public DemoActions @Demo => new DemoActions(this);
    public interface IDemoActions
    {
        void OnLeftMouse(InputAction.CallbackContext context);
        void OnRightMouse(InputAction.CallbackContext context);
    }
}
