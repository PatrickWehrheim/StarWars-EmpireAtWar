//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameAssets/PlayerActions/InputActionGame.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionGame : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionGame()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionGame"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""e43a39b1-3a13-407a-967f-eaa2a026db93"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""ac25a89d-6531-4cf4-865b-5ed32e2fa5b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Button"",
                    ""id"": ""f292b6b9-2fea-49f9-a9bc-6877885f3620"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackToMiddle"",
                    ""type"": ""Button"",
                    ""id"": ""cf2f0873-7ca5-46dd-afde-38584e17d7d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""158d9fe0-c8f7-4c04-8697-1254f4b6d218"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b88ac037-73af-4d96-a48a-06c0534caa30"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4883dfb7-f146-4980-9423-fd2f5b92d489"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackToMiddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Select = m_Game.FindAction("Select", throwIfNotFound: true);
        m_Game_MoveAction = m_Game.FindAction("MoveAction", throwIfNotFound: true);
        m_Game_BackToMiddle = m_Game.FindAction("BackToMiddle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Select;
    private readonly InputAction m_Game_MoveAction;
    private readonly InputAction m_Game_BackToMiddle;
    public struct GameActions
    {
        private @InputActionGame m_Wrapper;
        public GameActions(@InputActionGame wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Game_Select;
        public InputAction @MoveAction => m_Wrapper.m_Game_MoveAction;
        public InputAction @BackToMiddle => m_Wrapper.m_Game_BackToMiddle;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @MoveAction.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveAction;
                @MoveAction.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveAction;
                @MoveAction.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveAction;
                @BackToMiddle.started -= m_Wrapper.m_GameActionsCallbackInterface.OnBackToMiddle;
                @BackToMiddle.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnBackToMiddle;
                @BackToMiddle.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnBackToMiddle;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @MoveAction.started += instance.OnMoveAction;
                @MoveAction.performed += instance.OnMoveAction;
                @MoveAction.canceled += instance.OnMoveAction;
                @BackToMiddle.started += instance.OnBackToMiddle;
                @BackToMiddle.performed += instance.OnBackToMiddle;
                @BackToMiddle.canceled += instance.OnBackToMiddle;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnMoveAction(InputAction.CallbackContext context);
        void OnBackToMiddle(InputAction.CallbackContext context);
    }
}
